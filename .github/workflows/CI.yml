name: CI

on:
  push:
    branches: [ master ]
    paths:
      - 'TestWinuiRep/**'
      - 'TestWinuiRep.sln'

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
        platform: [arm64, x64, x86]
        
    runs-on: windows-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8

      - name: Publish
        run: >- 
          dotnet publish 
          -c Release 
          -r win-${{ matrix.platform }} 
          --sc True
          /t:Publish
          -p:WindowsPackageType=None
          -p:SelfContained=True
          -p:WindowsAppSDKSelfContained=True
          -p:PublishSingleFile=True
          -p:WindowsPackageType=None
          -p:Platform=${{ matrix.platform }} 
          -p:RuntimeIdentifier=win-${{ matrix.platform }} 
          -p:Configuration=Release
          -p:TargetFramework=net8.0-windows10.0.22621.0
          -p:DebugType=embedded
          -p:PublishProtocol=FileSystem
          -p:PublishDir=bin/Release/${{ matrix.platform }}
          -p:EnableMsixTooling=True
          -p:AssemblyName=TestWinuiRep-${{ matrix.platform }}

      - name: Upload MSIX package
        uses: actions/upload-artifact@v4
        with:
          name: MSIX Package-${{ matrix.platform }}
          path: ${{ github.workspace }}/TestWinuiRep/bin/Release/${{ matrix.platform }}
          if-no-files-found: error
          
  release:
    name: release
    needs: build
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
    
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - run: |
            Compress-Archive -Path "MSIX Package-arm64/*" -Destination "MSIX Package-arm64.zip"
            Compress-Archive -Path "MSIX Package-x64/*" -Destination "MSIX Package-x64.zip"
            Compress-Archive -Path "MSIX Package-x86/*" -Destination "MSIX Package-x86.zip"

      - name: Delete release if exist then create release
        id: delete-release
        run: gh release view "NightlyBuild" && gh release delete "NightlyBuild" -y --cleanup-tag ; gh release create NightlyBuild (get-item ./*.zip) -p --generate-notes 
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
